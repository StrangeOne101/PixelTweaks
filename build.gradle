buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = 'com.strangeone101'
version = '1.10.4'

java {
    archivesBaseName = 'PixelTweaks'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'devauth.enabled', 'true'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                pixeltweaks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                pixeltweaks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'pixeltweaks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                pixeltweaks {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
        content { includeGroup "mezz.jei" }
    }
    maven {
        name = "U-Team Repository"
        url = "https://repo.u-team.info"
    }

    maven {
        name = "CurseForge Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Arclight"
        url = 'https://maven.izzel.io/releases'
    } //Arclight

    maven {
        name = "spigot"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }

    maven {
        url = "https://repo.songoda.com/repository/public/"
    }

    mavenCentral()

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds JEI API as a compile dependency
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    //implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    //AmbienceExtras for muting their music in battles
    compileOnly fg.deobf('vazkii.ambience.ambience:Ambience-1.16.5-1.0.0:1.0.0')

    //UsefulBackpacks Integration
    compileOnly fg.deobf("info.u-team:u_team_core-1.16.5:3.2.1.258")
    compileOnly fg.deobf("info.u-team:useful_backpacks-1.16.5:1.12.1.102")
    //SimplyBackpacks Integration
    compileOnly fg.deobf("flanks255.simplybackpacks:simplybackpacks-1.16.5-2.1.2-build.49:1.0.0")
    //SophisticatedBackpacks Integration
    implementation fg.deobf("curse.maven:sophisticated-backpacks-422301:4167327")
    implementation fg.deobf("curse.maven:curios-309927:4419403")
    //TravelersBackpack Integration
    compileOnly fg.deobf("curse.maven:travelers-backpack-321117:4836229") //1.16.5-5.4.50

    //FTB Quests and Library
    implementation fg.deobf("curse.maven:ftb-library-forge-404465:3553840")
    implementation fg.deobf("curse.maven:ftb-quests-forge-289412:4297999")
    implementation fg.deobf("curse.maven:ftb-teams-forge-404468:3535953")
    implementation fg.deobf("curse.maven:architectury-api-419699:4521290")
    runtimeOnly fg.deobf("curse.maven:item-filters-309674:3376819")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compileOnly fg.deobf('io.izzel.arclight:arclight-forge-1.16:1.0.25:srg')
    compileOnly fg.deobf('org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT')
    compileOnly fg.deobf('org.spigotmc:spigot:1.16.5')

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    implementation fg.deobf('com.pixelmonmod.pixelmon:Pixelmon-1.16.5-9.1.11-universal:9.1.11')
}

mixin {
    add sourceSets.main, 'mixins.pixeltweaks.refmap.json'
    config 'mixins.pixeltweaks.json'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "pixeltweaks",
                "Specification-Vendor"    : "StrangeOne101",
                "Specification-Version"   : project.jar.archiveVersion, // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "StrangeOne101",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
